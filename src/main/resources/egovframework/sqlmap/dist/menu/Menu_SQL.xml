<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fpdisys.dist.menu.mapper.MenuMapper">

	<resultMap id="authorizedMenuResultMap" type="com.fpdisys.dist.menu.domain.AuthorizedMenu">
        <result property="searchAuth" column="SCH_AH"/>
        <result property="saveAuth" column="SAV_AH"/>
        <result property="excelAuth" column="EXL_AH"/>
        <result property="className" column="CLASS_NM"/>
        <result property="function1Auth" column="FN1_AH"/>
        <result property="function2Auth" column="FN2_AH"/>
        <result property="function3Auth" column="FN3_AH"/>
        <result property="function4Auth" column="FN4_AH"/>
        <result property="function5Auth" column="FN5_AH"/>
        <result property="menuCode" column="MNU_CD"/>
        <result property="menuName" column="MNU_NM"/>
        <result property="menuLevel" column="MNU_LV"/>
        <result property="menuIndex" column="MNU_IX"/>
        <result property="parentMenuCode" column="MNUUP_CD"/>
        <result property="icon" column="ICON"/>
        <result property="programPath" column="PROG_PH"/>
        <result property="programName" column="PROG_NM"/>
        <result property="target" column="TARGET"/>
        <result property="icon" column="ICON"/>
        <result property="remark" column="REMARK"/>
        
        <result property="menuNm" column="MENU_NM"/>
        <result property="menuUrl" column="MENU_URL"/>
        <result property="menuGubn" column="MENU_GUBN"/>
        <result property="menuOrder" column="MENU_ORDER"/>
        <result property="menuDetail" column="MENU_DETAIL"/>
        <result property="menuDepth" column="MENU_DEPTH"/>

    </resultMap>

    <resultMap id="menuResultMap" type="com.fpdisys.dist.menu.domain.Menu">
        <result property="mnuCd" column="MNU_CD"/>
        <result property="mnuNm" column="MNU_NM"/>
        <result property="icon" column="ICON"/>
        <result property="mnuLv" column="MNU_LV"/>
        <result property="mnuIx" column="MNU_IX"/>
        <result property="mnuUpCd" column="MNUUP_CD"/>
        <result property="remark" column="REMARK"/>
        <result property="useYn" column="USE_YN"/>
        <result property="progCd" column="PROG_CD"/>
        <result property="progNm" column="PROG_NM"/>
         <result property="progCd" column="PROG_CD"/>
        <result property="progNm" column="PROG_NM"/>
        <result property="createdAt" column="INS_DT"/>
        <result property="createdBy" column="INS_ID"/>
        <result property="modifiedAt" column="UPT_DT"/>
        <result property="modifiedBy" column="UPT_ID"/>
    </resultMap>
    
    <!-- 캐싱을 위해 새로 추가한 쿼리들에 대한 resultMap -->
    <resultMap id="selectMap" type="com.fpdisys.dist.menu.domain.MenuVO">
		<result property="menuId"			column="MENU_ID" /><!-- 메뉴 ID -->
		<result property="menuNm"			column="MENU_NM" /><!-- 메뉴명 -->
		<result property="url"				column="URL" /><!-- URL -->
		<result property="upperId"			column="UPPER_ID" /><!-- 상위 메뉴 ID -->
		<result property="upperName"		column="UPPER_NM" /><!-- 상위 메뉴명 -->
		<result property="depth"			column="DEPTH" /><!-- 단계 -->
		<result property="orders"			column="ORDERS" /><!-- 정렬순서 -->
		<result property="positionBit"		column="POSITION_BIT" /><!-- 출력 위치 설정값 -->
		<result property="pathId"			column="PATH_ID" /><!-- 메뉴 ID 경로 -->
		<result property="pathNm"			column="PATH_NM" /><!-- 메뉴명 경로 -->
		<result property="description"		column="DESCRIPTION" /><!-- 메뉴 설명 -->
		<result property="displayBit"		column="DISPLAY_BIT" /><!-- 출력여부 설정값 -->
		<result property="accessBit"		column="ACCESS_BIT" /><!-- 접근권한 설정값 -->
		<result property="groupNm"			column="GROUP_NM" /><!-- 접근권한 이름 -->
		<result property="type"				column="TYPE" /><!-- 메뉴 구분 -->
		<result property="programId"		column="PROGRAM_ID" /><!-- 프로그램ID -->
		<result property="programNm"		column="PROGRAM_NM" /><!-- 프로그램명 -->
		<result property="programUpperNm"	column="PROGRAM_UPPER_NM" /><!-- 상위 프로그램명 -->
		<result property="targetId"			column="TARGET_ID" /><!-- 대상ID -->
		<result property="targetNm"			column="TARGET_NM" /><!-- 대상ID -->
		<result property="hrefTarget"		column="HREF_TARGET" /><!-- LINK TARGET -->
		<result property="useYn"			column="USE_YN" /><!-- 사용여부 -->
		<result property="regDate"			column="REG_DATE" /><!-- 등록일 -->
		<result property="regUserId"		column="REG_USER_ID" /><!-- 등록자 -->
		<result property="regIp"			column="REG_IP" /><!-- 등록IP -->
		<result property="menuCd"			column="MENU_CD"/>
	</resultMap>


    <select id="getAuthorizedMenuByUserCode" resultMap="authorizedMenuResultMap"  statementType="PREPARED">
        SELECT
          A.SCH_AH,
          A.SAV_AH,
          A.EXL_AH,
          A.FN1_AH,
          A.FN2_AH,
          A.FN3_AH,
          A.FN4_AH,
          A.FN5_AH,
          A.MNU_CD,
          A.GRP_AUTH_CD,
          C.MNU_NM,
          C.MNU_LV,
          C.MNU_IX,
          C.MNUUP_CD,
          C.ICON,
          D.PROG_PH,
          D.PROG_NM,
          D.TARGET,
          D.REMARK
      FROM
          T_GRP_AUTH A,
          T_USER_AUTH B,
          T_MNU C
      LEFT OUTER JOIN T_PROG D
      ON C.PROG_CD = D.PROG_CD

      WHERE
          A.GRP_AUTH_CD = B.GRP_AUTH_CD AND
          A.MNU_CD = C.MNU_CD AND
          C.USE_YN = 'Y' AND
          B.USER_CD = #{value}
      ORDER BY MNU_LV,MNU_IX,MNU_CD
    </select>


    <select id="activeMenus" resultMap="menuResultMap" statementType="PREPARED">
       <!--  SELECT * FROM (
            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.USE_YN = 'Y' AND
              A.MNU_LV = '1'

            UNION ALL

            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD
            WHERE
              A.MNU_LV = '2' AND
              A.USE_YN = 'Y' AND
              A.MNUUP_CD IN (SELECT MNU_CD FROM T_MNU WHERE USE_YN = 'Y' AND MNU_LV = '1')

            UNION ALL

            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.MNU_LV = '3' AND
              A.USE_YN = 'Y' AND
              A.MNUUP_CD IN (SELECT MNU_CD FROM T_MNU WHERE USE_YN = 'Y' AND MNU_LV = '2')
        ) X
        ORDER BY X.MNU_LV, X.MNU_CD
 -->
 SELECT 
	MENU_NM,
	MENU_URL,
	MENU_GUBN,
	MENU_ORDER,
	MENU_DETAIL,
	MENU_DEPTH
FROM TB_MENU 

ORDER BY MENU_DEPTH
    </select>
    <select id="selectMenu" resultMap="menuResultMap" statementType="PREPARED">
SELECT 
	MENU_NM,
	MENU_URL,
	MENU_GUBN,
	MENU_ORDER,
	MENU_DETAIL,
	MENU_DEPTH
FROM TB_MENU 

ORDER BY MENU_DEPTH
    </select>
     <select id="activeMenusNOTSYSTEM" resultMap="menuResultMap" statementType="PREPARED">
       SELECT * FROM (
            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.USE_YN = 'Y' AND
              A.MNU_LV = '1'

            UNION ALL

            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A

            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.MNU_LV = '2' AND
              A.USE_YN = 'Y' AND
              A.MNUUP_CD IN (SELECT MNU_CD FROM T_MNU WHERE USE_YN = 'Y' AND MNU_LV = '1')

            UNION ALL

            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.MNU_LV = '3' AND
              A.USE_YN = 'Y' AND
              A.MNUUP_CD IN (SELECT MNU_CD FROM T_MNU WHERE USE_YN = 'Y' AND MNU_LV = '2')
        ) X
        WHERE X.MNU_CD NOT IN (SELECT MNU_CD FROM T_MNU WHERE MNU_CD LIKE 'sys%' )
        ORDER BY X.MNU_LV, X.MNU_IX, X.MNU_CD
     </select>
     <select id="getAuthorizedMenuNoLogin" resultMap="authorizedMenuResultMap"  statementType="PREPARED">
       SELECT 
  X.* ,
  D.PROG_PH,
  NVL(D.SAV_AH,'N') AS SAV_AH,
  NVL(D.SCH_AH,'Y') AS SCH_AH,
  NVL(D.EXL_AH,'N') AS EXL_AH,
  NVL(D.FN1_AH,'N') AS FN1_AH,
  NVL(D.FN2_AH,'N') AS FN2_AH,
  NVL(D.FN3_AH,'N') AS FN3_AH,
  NVL(D.FN4_AH,'N') AS FN4_AH,
  NVL(D.FN5_AH,'N') AS FN5_AH,
  NVL(D.TARGET,'_self') AS TARGET
  FROM (
            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.USE_YN = 'Y' AND
              A.MNU_LV = '1'

            UNION ALL

            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A

            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.MNU_LV = '2' AND
              A.USE_YN = 'Y' AND
              A.MNUUP_CD IN (SELECT MNU_CD FROM T_MNU WHERE USE_YN = 'Y' AND MNU_LV = '1')

            UNION ALL

            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD
            WHERE
              A.MNU_LV = '3' AND
              A.USE_YN = 'Y' AND
              A.MNUUP_CD IN (SELECT MNU_CD FROM T_MNU WHERE USE_YN = 'Y' AND MNU_LV = '2')
        ) X
          LEFT OUTER JOIN T_PROG D
      ON X.PROG_CD = D.PROG_CD
        WHERE X.MNU_CD NOT IN (SELECT MNU_CD FROM T_MNU WHERE MNU_CD LIKE 'sys%' )
        ORDER BY X.MNU_LV, X.MNU_IX, X.MNU_CD
     </select>
     
    <select id="getAuthorizedMenuNoLogin2" resultMap="authorizedMenuResultMap"  statementType="PREPARED">
       SELECT 
  X.* ,
  D.PROG_PH,
  NVL(D.SAV_AH,'N') AS SAV_AH,
  NVL(D.SCH_AH,'Y') AS SCH_AH,
  NVL(D.EXL_AH,'N') AS EXL_AH,
  NVL(D.FN1_AH,'N') AS FN1_AH,
  NVL(D.FN2_AH,'N') AS FN2_AH,
  NVL(D.FN3_AH,'N') AS FN3_AH,
  NVL(D.FN4_AH,'N') AS FN4_AH,
  NVL(D.FN5_AH,'N') AS FN5_AH,
  NVL(D.TARGET,'_self') AS TARGET
  FROM (
            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.USE_YN = 'Y' AND
              A.MNU_LV = '1'

            UNION ALL

            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A

            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.MNU_LV = '2' AND
              A.USE_YN = 'Y' AND
              A.MNUUP_CD IN (SELECT MNU_CD FROM T_MNU WHERE USE_YN = 'Y' AND MNU_LV = '1')

            UNION ALL

            SELECT
                A.MNU_CD,
                A.MNU_NM,
                A.ICON,
                A.MNU_LV,
                A.MNU_IX,
                A.MNUUP_CD,
                A.REMARK,
                A.USE_YN,
                B.PROG_CD,
                B.PROG_NM,
                A.INS_DT,
                A.INS_ID,
                A.UPT_DT,
                A.UPT_ID
            FROM T_MNU A
            LEFT OUTER JOIN T_PROG B
            ON A.PROG_CD = B.PROG_CD

            WHERE
              A.MNU_LV = '3' AND
              A.USE_YN = 'Y' AND
              A.MNUUP_CD IN (SELECT MNU_CD FROM T_MNU WHERE USE_YN = 'Y' AND MNU_LV = '2')
        ) X
          LEFT OUTER JOIN T_PROG D
      ON X.PROG_CD = D.PROG_CD
        ORDER BY X.MNU_LV, X.MNU_IX, X.MNU_CD

     </select>
     
      <select id="getFindAllByOrderByMnuLvAscMnuIxAsc" resultMap="menuResultMap"  statementType="PREPARED">
      		SELECT A.MNU_CD,
		       A.INS_DT,
		       A.INS_ID,
		       A.UPT_DT,
		       A.UPT_ID,
		       A.ICON,
		       A.MNU_IX,
		       A.MNU_LV,
		       A.MNU_NM,
		       A.MNUUP_CD,
		       A.PROG_CD,
           	   D.PROG_NM,
		       A.USE_YN,
		       A.REMARK
		  FROM T_MNU A 
       LEFT OUTER JOIN T_PROG D
       ON A.PROG_CD = D.PROG_CD
      ORDER BY A.MNU_LV,A.MNU_IX, A.MNU_CD ASC
      </select>
      
      <insert id="insertMenu" parameterType="java.util.HashMap"  >
      	INSERT INTO T_MNU 
       ( 
           MNU_CD,
           INS_DT,
           INS_ID,
           ICON,
           MNU_IX,
           MNU_LV,
           MNU_NM,
           MNUUP_CD,
           PROG_CD,
           USE_YN,
           REMARK 
       ) 
       VALUES 
       ( 
           #{mnuCd     , jdbcType=VARCHAR},
           sysdate,
           #{userId     , jdbcType=VARCHAR},
           #{icon     , jdbcType=VARCHAR},
           #{mnuIx     , jdbcType=NUMERIC},
           #{mnuLv     , jdbcType=NUMERIC},
           #{mnuNm     , jdbcType=VARCHAR},
           #{mnuUpCd     , jdbcType=VARCHAR},
           #{progCd     , jdbcType=VARCHAR},
           #{useYn     , jdbcType=VARCHAR},
           #{remark     , jdbcType=VARCHAR} 
       ) 
      </insert>
      
       <update id="updateMenu" parameterType="java.util.HashMap"  >
       UPDATE T_MNU
		SET UPT_DT = sysdate, 
		 UPT_ID = #{userId     , jdbcType=VARCHAR}, 
		 ICON =  #{icon     , jdbcType=VARCHAR},
		 MNU_IX = #{mnuIx     , jdbcType=NUMERIC}, 
		 MNU_LV = #{mnuLv     , jdbcType=NUMERIC}, 
		 MNU_NM = #{mnuNm     , jdbcType=VARCHAR},
		 MNUUP_CD =  #{mnuUpCd     , jdbcType=VARCHAR},
		 PROG_CD =  #{progCd     , jdbcType=VARCHAR},
		 USE_YN = #{useYn     , jdbcType=VARCHAR}, 
		 REMARK =  #{remark     , jdbcType=VARCHAR} 
		WHERE MNU_CD = #{mnuCd     , jdbcType=VARCHAR} 
       </update>
       
         <select id="findOne" resultMap="menuResultMap"  parameterType="java.util.HashMap"  statementType="PREPARED">
         	SELECT A.MNU_CD,
		       A.INS_DT,
		       A.INS_ID,
		       A.UPT_DT,
		       A.UPT_ID,
		       A.ICON,
		       A.MNU_IX,
		       A.MNU_LV,
		       A.MNU_NM,
		       A.MNUUP_CD,
		       A.PROG_CD,
		       A.USE_YN,
		       A.REMARK
		  		FROM T_MNU A
		  WHERE A.MNU_CD = #{mnuCd     , jdbcType=VARCHAR} 
         </select>
         
           <update id="getMargeMenu"  parameterType="java.util.HashMap" >
          <![CDATA[
          			MERGE INTO T_MNU a
       			USING DUAL
       			ON (
       				 a.MNU_CD = #{mnuCd     , jdbcType=VARCHAR} 
       				)
       			WHEN MATCHED THEN
       				UPDATE SET
       				 UPT_DT = sysdate, 
					 UPT_ID = #{userId     , jdbcType=VARCHAR}, 
					 ICON =  #{icon     , jdbcType=VARCHAR},
					 MNU_IX = #{mnuIx     , jdbcType=NUMERIC}, 
					 MNU_LV = #{mnuLv     , jdbcType=NUMERIC}, 
					 MNU_NM = #{mnuNm     , jdbcType=VARCHAR},
					 MNUUP_CD =  #{mnuUpCd     , jdbcType=VARCHAR},
					 PROG_CD =  #{progCd     , jdbcType=VARCHAR},
					 USE_YN = #{useYn     , jdbcType=VARCHAR}, 
					 REMARK =  #{remark     , jdbcType=VARCHAR} 
					        				
       			WHEN NOT MATCHED THEN
       			 INSERT
		       ( 
		           MNU_CD,
		           INS_DT,
		           INS_ID,
		           ICON,
		           MNU_IX,
		           MNU_LV,
		           MNU_NM,
		           MNUUP_CD,
		           PROG_CD,
		           USE_YN,
		           REMARK 
		       ) 
		       VALUES 
		       ( 
		           #{mnuCd     , jdbcType=VARCHAR},
		           sysdate,
		           #{userId     , jdbcType=VARCHAR},
		           #{icon     , jdbcType=VARCHAR},
		           #{mnuIx     , jdbcType=NUMERIC},
		           #{mnuLv     , jdbcType=NUMERIC},
		           #{mnuNm     , jdbcType=VARCHAR},
		           #{mnuUpCd     , jdbcType=VARCHAR},
		           #{progCd     , jdbcType=VARCHAR},
		           #{useYn     , jdbcType=VARCHAR},
		           #{remark     , jdbcType=VARCHAR} 
		       ) 
          	
           	]]>
       </update>
     
     <select id="adminLoginProc" parameterType="java.util.HashMap" resultType="egovframework.rte.psl.dataaccess.util.EgovMap">
		SELECT MAX(A.USER_ID) AS USER_ID
		  , '' || COUNT(1) AS  ID_CNT	
	      , MAX(A.COMP_CODE) AS COMP_CODE
	      , MAX(A.USER_TYPE) AS USER_TYPE
	      , MAX(A.LAST_LOGIN_DATE) AS LAST_LOGIN_DATE
	      , MAX(A.REMARK) AS REMARK
	      , MAX(A.USE_YN) AS USE_YN
	      , MAX(A.PASS_ERR_NUM) AS PASS_ERR_NUM
	      , MAX(B.GRP_AUTH_CODE) AS GRP_AUTH_CODE
	  FROM T_USER A, T_USER_AUTH B
	  	WHERE A.USER_ID = B.USER_ID 
	  	AND A.USER_ID =#{loginId,jdbcType=VARCHAR}
	  	AND A.USE_YN ='Y'  
	  	AND 1=1
	</select>
	<select id="selectListForCache" resultMap="selectMap">
		<![CDATA[
		SELECT MENU_CD MENU_ID
		  , MENU_NM
		  , MENU_URL URL
		  , MENU_UP_CD UPPER_ID
		  , MENU_DEPTH DEPTH
		  , MENU_ORDER ORDERS
		  , NULL POSITION_BIT
		  , SUBSTR(SYS_CONNECT_BY_PATH(MENU_CD, '>'), 2) PATH_ID
		  , SUBSTR(SYS_CONNECT_BY_PATH(MENU_NM, '>'), 2) PATH_NM
		  , MENU_DETAIL DESCRIPTION
		  , NULL DISPLAY_BIT
		  , NULL ACCESS_BIT
		  , 'U' TYPE
		  , NULL PROGRAM_ID
		  , NULL TARGET_ID
		  , NULL HREF_TARGET
		  , USE_YN
		FROM TB_MENU
		WHERE USE_YN = 'Y'
		START WITH MENU_CD = '0'
		CONNECT BY PRIOR MENU_CD = MENU_UP_CD
		ORDER BY MENU_DEPTH, MENU_UP_CD, MENU_ORDER
		]]>
	</select>

	<select id="selectMaxDepth" resultMap="selectMap">
		<![CDATA[
			SELECT NVL(MAX(MENU_DEPTH),0) AS CNT
			FROM TB_MENU
		]]>
	</select>
			<!-- 메뉴 목록 조회 [캐쉬메모리저장] selectListForCache -->
	<select id="selectMenuList" resultMap="selectMap">
		<![CDATA[
			SELECT
				MENU_CD MENU_ID
				, MENU_NM
				, MENU_URL URL
				, MENU_UP_CD UPPER_ID
				, MENU_DEPTH DEPTH
				, MENU_ORDER ORDERS
				, NULL POSITION_BIT
				, SUBSTR(SYS_CONNECT_BY_PATH(MENU_CD, '>'), 2) PATH_ID
				, SUBSTR(SYS_CONNECT_BY_PATH(MENU_NM, '>'), 2) PATH_NM
				, MENU_DETAIL DESCRIPTION
				, NULL DISPLAY_BIT
				, NULL ACCESS_BIT
				, 'U' TYPE
				, NULL PROGRAM_ID
				, NULL TARGET_ID
				, NULL HREF_TARGET
				, USE_YN
			FROM TB_MENU
			]]>
			<if test ="useYn != null and useYn != ''">
				<![CDATA[
					WHERE USE_YN = #{useYn, jdbcType=VARCHAR}
				]]>
			</if>
			<![CDATA[
			ORDER BY MENU_DEPTH, MENU_UP_CD, MENU_ORDER
		]]>
	</select>
		
	<!-- 메뉴 삭제 -->
	<delete id="delete">
		<![CDATA[
			DELETE
			FROM TB_MENU
			WHERE MENU_CD = #{menuId,jdbcType=VARCHAR}
		]]>
	</delete>
	
	<!-- 아이디 중복체크 -->
	<select id="selectMenuIdCnt" resultMap="selectMap">
		<![CDATA[
		SELECT COUNT(MENU_CD) as CNT
		FROM TB_MENU
		WHERE MENU_CD =#{menuId,jdbcType=VARCHAR}
		]]>
	</select>
		
	<!-- 하위 메뉴 존재 여부 조회 -->
	<select id="selectSubMenuCnt" resultMap="selectMap">
		<![CDATA[
			SELECT COUNT(MENU_CD) as CNT
			FROM TB_MENU
			WHERE MENU_UP_CD = #{upperId,jdbcType=VARCHAR}
		]]>
	</select>
	


	<select id="selectContentsMenuList"  resultMap="selectMap">
		<![CDATA[
			SELECT * FROM (
				SELECT
					(SELECT COUNT(*) FROM TB_MENU B  WHERE (B.MENU_DEPTH = (A.MENU_DEPTH + 1) OR B.MENU_DEPTH = 1) AND B.USE_YN = 'Y'AND B.MENU_UP_CD = A.MENU_CD) AS CHILD_CNT,
					A.*
				FROM TB_MENU A
				WHERE  A.USE_YN = 'Y'
				START WITH A.MENU_UP_CD IN (NULL, '0') /* 부모의 시작 조건 */
				CONNECT BY PRIOR  A.MENU_CD = A.MENU_UP_CD /* 자신의 키와 부모키를 비교 */
				ORDER SIBLINGS BY A.MENU_UP_CD ASC, A.MENU_CD ASC /* 정렬 (일반적인 ORDER BY 가 아닌 계층내에서 정렬 할 수 있는 ORDER SIBLINGS BY) */			)
			WHERE 1=1
			]]>
			<if test="contents!=null and contents != ''">
				and (URL LIKE '/%/contents%' OR CHILD_CNT > 0)
			</if>
	</select>

	<select id="selectListByUpperId" resultMap="selectMap">
		<![CDATA[
			SELECT
				MENU_CD MENU_ID
				,MENU_NM
				,MENU_URL URL
				,MENU_UP_CD UPPER_ID
				,MENU_DEPTH DEPTH
				,MENU_ORDER ORDERS
				,NULL POSITION_BIT
				,SUBSTR(SYS_CONNECT_BY_PATH(MENU_CD, '>'), 2) PATH_ID
				,SUBSTR(SYS_CONNECT_BY_PATH(MENU_NM, '>'), 2) PATH_NM
				,MENU_DETAIL DESCRIPTION
				,NULL DISPLAY_BIT
				,'U' TYPE
				,NULL PROGRAM_ID
				,NULL TARGET_ID
				,NULL HREF_TARGET
				,USE_YN
				,REG_DT REG_DATE
				,REG_ID REG_USER_ID
				,NULL REG_IP
			FROM TB_MENU
			WHERE USE_YN = 'Y'
			START WITH MENU_CD = '0'
			CONNECT BY PRIOR MENU_CD = MENU_UP_CD
			]]>
			<if test="upperId != null and upperId != ''"><![CDATA[
				AND MENU_UP_CD IS NULL
			]]></if>
			<if test="upperId == null and upperId == ''">
				AND MENU_UP_CD = #{upperId,jdbcType=VARCHAR}
			</if>
			<![CDATA[
				ORDER BY MENU_DEPTH, MENU_UP_CD, MENU_ORDER
		]]>
	</select>
	


	<select id="select" resultMap="selectMap" >
		<![CDATA[
		SELECT
		    MENU_CD MENU_ID
		    ,MENU_URL URL
		    ,MENU_NM
		    ,MENU_UP_CD UPPER_ID
		    ,(SELECT MENU_NM FROM TB_MENU WHERE MENU_CD = MENU_UP_CD) AS UPPER_NM
		    ,MENU_DEPTH DEPTH
		    ,MENU_ORDER ORDERS
		    ,NULL POSITION_BIT
		    , SUBSTR(SYS_CONNECT_BY_PATH(MENU_CD, '>'), 2) PATH_ID
		    , SUBSTR(SYS_CONNECT_BY_PATH(MENU_NM, '>'), 2) PATH_NM
		    , MENU_DETAIL DESCRIPTION
		    , NULL DISPLAY_BIT
		    , NULL ACCESS_BIT
		    ,NULL GROUP_NM
		    ,'U' TYPE
		    , NULL PROGRAM_ID
		    , NULL TARGET_ID
		    , NULL HREF_TARGET
		    , USE_YN
		    ,REG_DT REG_DATE
		    ,REG_ID REG_USER_ID
		    ,NULL REG_IP
		FROM TB_MENU
		WHERE USE_YN = 'Y'
		]]>
		<if test ="menuId != null and menuId != ''">
			AND MENU_CD =#{menuId,jdbcType=VARCHAR}
		</if>
		<![CDATA[
		START WITH MENU_CD = '0'
		CONNECT BY PRIOR MENU_CD = MENU_UP_CD
		ORDER BY MENU_DEPTH, MENU_UP_CD, MENU_ORDER
		
		]]>
	</select>

	<insert id="insert" parameterType="java.util.HashMap" >
		<![CDATA[
			INSERT INTO TB_MENU(
				MENU_CD
				,MENU_NM
				,MENU_UP_CD
				,MENU_URL
				,MENU_GUBN
				,MENU_ORDER
				,MENU_DETAIL
				,MENU_DEPTH
				,USE_YN
				,REG_DT
				,REG_ID
				,UPT_DT
				,UPT_ID
			) VALUES (
				#{menuId,jdbcType=VARCHAR}#
				,#{menuNm,jdbcType=VARCHAR}#
				,#{upperId,jdbcType=VARCHAR}#
				,#{url,jdbcType=VARCHAR}#
				,'2'
				,#{orders,jdbcType=VARCHAR}#
				,#{description,jdbcType=VARCHAR}#
				,#{depth,jdbcType=VARCHAR}#
				,'Y'
				,SYSDATE
				,#{regId,jdbcType=VARCHAR}#
				,#{uptDt,jdbcType=VARCHAR}#
				,#{uptId,jdbcType=VARCHAR}#
		)]]>
	</insert>


	<!-- 메뉴 정보 update -->
	<update id="update" parameterType="java.util.HashMap" >
		<![CDATA[
			UPDATE TB_MENU SET
				MENU_NM = #{menuNm,jdbcType=VARCHAR}
				, MENU_URL = #{url,jdbcType=VARCHAR}
				, MENU_UP_CD = #{upperId,jdbcType=VARCHAR}
				, MENU_ORDER = #{orders,jdbcType=VARCHAR}
				, MENU_DETAIL = #{description,jdbcType=VARCHAR}
				, UPT_DT = SYSDATE
				, UPT_ID = #{modUserId,jdbcType=VARCHAR}
				, USE_YN = #{useYn,jdbcType=VARCHAR}
			WHERE MENU_CD = #{menuId,jdbcType=VARCHAR}
		]]>
	</update>



	<!-- 해당 프로그램 메뉴 목록 조회 -->
	<select id="selectListByProgramId" resultMap="selectMap">
		<![CDATA[
			SELECT
				MENU_CD MENU_ID,
				MENU_NM,
				PATH_ID,
				PATH_NM
			FROM (
				SELECT
					MENU_CD
					,MENU_NM
					,SUBSTR(SYS_CONNECT_BY_PATH(MENU_CD, '>'), 2) PATH_ID
					,SUBSTR(SYS_CONNECT_BY_PATH(MENU_NM, '>'), 2) PATH_NM
					,(SELECT COUNT(*) FROM FW_MENU B WHERE B.DEPTH = 2 AND B.URL LIKE '%/front/contents/%' AND B.UPPER_ID = A.MENU_ID) AS CHILD_CNT
				FROM TB_MENU 
				WHERE USE_YN = 'Y'
				AND MENU_DEPTH = 1
				START WITH MENU_CD = '0'
				CONNECT BY PRIOR MENU_CD = MENU_UP_CD
			) DATA
			ORDER BY DATA.PATH_ID
		]]>
	</select>
	<select id="selectListForCache2" resultMap="selectMap">
		<![CDATA[
			SELECT 
				MENU_CD MENU_ID
				, MENU_URL URL
				, MENU_DETAIL DESCRIPTION
			FROM TB_MENU 
			WHERE USE_YN = 'Y'
		]]>
	</select>
	<select id="getCustomInfo" parameterType="java.util.HashMap"  resultType="java.util.HashMap">
		SELECT to_char(t.REG_DATE,'yyyy-mm-dd') REG_DATE,t.* FROM T_CUSTOMINFO t WHERE 1=1
		<if test="id != null and id != ''" >
			AND t.USER_ID like '%' || #{id} || '%'
		</if> 
		order by t.ACS_YN DESC 
	</select>
	
	<update id="updateAcsYn" parameterType="java.util.Map" >
		update T_CUSTOMINFO set 
		ACS_YN = #{val}
		where USER_ID = #{key}
	</update>
</mapper>